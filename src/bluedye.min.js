/**
 * BlueDyeJS Alpha v1.2.1
 * by Yazid SLILA (@yokgs)
 * MIT License
 */
!function (t, i) { "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : t.bluedye = i() }(this, function () { "use strict"; var rgb = (t, i, e) => [t, i, e, 1], rgba = (t, i, e, r) => [t, i, e, r], _E = Math.floor, _N = Math.min, _X = Math.max, _H = t => (t > 15 ? "" : "0") + Math.floor(t).toString(16), fromHex = t => 4 == t.length ? 17 * parseInt(t[1] + t[1] + t[2] + t[2] + t[3] + t[3], 16) : parseInt(t.substr(1), 16), _c = t => _X(0, _N(_E(t), 255)), _ac = t => _X(0, _N(t, 1)), _d = (t, i) => (1 - i / 10) * t, _l = (t, i) => t + (1 - i / 10) * (255 - t), bluedye = function (t) { return new localBD.c(t) }; let localBD = bluedye.prototype = { c: function (c) { var s = [0, 0, 0, 1]; if (void 0 === c && (s[3] = 0), "string" == typeof c) if (/^#[0-1a-fA-F]+/.test(c)) c = fromHex(c); else try { s = eval(c) } catch (t) { } if ("number" == typeof c) for (let t = 2; t >= 0; t--)s[t] = _E(c) % 256, c /= 256; return "object" == typeof c && c.length && (s = c, 3 == s.length ? s[3] = 1 : s.length < 3 && (s = [0, 0, 0, 0])), "boolean" == typeof c && c && (s = [255, 255, 255, 1]), this.R = _c(s[0]), this.G = _c(s[1]), this.B = _c(s[2]), this.A = _ac(s[3]), this.tag = null, this }, red: function (t) { return "number" == typeof t && (this.R = t), this }, green: function (t) { return "number" == typeof t && (this.G = t), this }, blue: function (t) { return "number" == typeof t && (this.B = t), this }, alpha: function (t) { return this.A = _ac(alpha), this }, rgb: function (t, i, e) { return this.red(t).green(i).blue(e) }, rgba: function (t, i, e, r) { return this.rgb(t, i, e).alpha(r) }, dark: function (t = 1) { return t = _N(_X(t, 0), 10), [this.R, this.G, this.B] = this.toArray().map(i => _d(i, t)), this }, light: function (t = 1) { return t = _N(_X(t, 0), 10), [this.R, this.G, this.B] = this.toArray().map(i => _l(i, t)), this }, negative: function () { return [this.R, this.G, this.B] = this.toArray().map(t => 255 - t), this }, redToBlue: function () { return [this.R, this.G, this.B] = [this.G, this.B, this.R], this }, blueToRed: function () { return [this.R, this.G, this.B] = [this.B, this.R, this.G], this }, gray: function () { var t = _E((this.R + this.G + this.B) / 3); return this.R = this.G = this.B = t, this }, grey: function () { return this.gray() }, random: function () { return [this.R, this.G, this.B] = this.toArray().map(() => 256 * Math.random()), this }, css: function () { return 1 === this.A ? `rgb(${this.R},${this.G},${this.B})` : `rgba(${this.R},${this.G},${this.B},${this.A})` }, hex: function () { return `#${_H(this.R)}${_H(this.G)}${_H(this.B)}` }, number: function () { return 256 * (256 * this.R + this.G) + this.B }, toArray: function () { return [this.R, this.G, this.B] }, correct: function () { return [this.R, this.G, this.B] = this.toArray().map(_c), this.A = _ac(this.A), this } }; return localBD.c.prototype = localBD, bluedye.add = function (t, i) { for (let e in t) { (e in bluedye ? i : !i) && (bluedye[e] = t[e]) } return bluedye }, bluedye.add({ version: [1, 2, 1], alpha: !0, rgb: function (t, i, e) { return bluedye(`rgb(${t},${i},${e})`) }, rgba: function (t, i, e, r) { return bluedye(`rgba(${t},${i},${e},${r})`) } }), bluedye });